"use strict";function App(){this.api={list:"/api/normal/list",add:"/api/normal/add",del:"/api/normal/del"}}App.prototype={init:function(){this.list(),this.add(),this.del(),this.json()},list:function(){var n=this;$("#list").html("").hide();$.ajax({url:n.api.list,dataType:"json",type:"POST"}).done(function(n){0!=n.length&&($("#list").show(),n.forEach(function(t,a){t=$('<div class="item">\n                      <span class="l info" style="animation-delay:'.concat(a/n.length*5,'s">').concat(t.info,'</span>\n                      <span class="l">').concat(t.time,'</span>\n                      <span class="r del" _id=').concat(t._id,">del</span>\n                    </div>")),$("#list").append(t)}))})},add:function(){var n=this;$("#add").on("click",function(){$.ajax({url:n.api.add,dataType:"json",type:"POST",data:{info:""+Math.floor(1e5*Math.random()),time:n._time()}}).done(function(t){n.list()})})},_time:function(){var n,t,a,i,o,s,c;return n=new Date,t=n.getFullYear(),a=n.getMonth()+1,i=n.getDate(),o=n.getHours(),s=n.getMinutes(),c=n.getSeconds(),"".concat(t,"-").concat(a,"-").concat(i," ").concat(o,":").concat(s,":").concat(c)},del:function(){var n=this;$("#list").on("click",".del",function(){$.ajax({url:n.api.del,dataType:"json",type:"POST",data:{_id:$(this).attr("_id")}}).done(function(t){n.list()})})},json:function(){$("#list_json").html("").hide();var n;$.getJSON("./index.json",function(t){console.log(t),0!=t.length&&($("#list_json").show(),t.forEach(function(t,a){console.log(t),n=$('<div class="item"></div>');for(var i in t)n.append($('<span class="l" style="width:100px;">'.concat(i,":").concat(t[i],"</span>")));$("#list_json").append(n)}))})}},(new App).init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkFwcCIsInRoaXMiLCJhcGkiLCJsaXN0IiwiYWRkIiwicHJvdG90eXBlIiwiaW5pdCIsImRlbCIsIm1lIiwiJCIsImh0bWwiLCJoaWRlIiwiYWpheCIsInVybCIsImRhdGFUeXBlIiwiZG9uZSIsImFyciIsImxlbmd0aCIsInNob3ciLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4IiwiY29uY2F0IiwiaW5mbyIsInRpbWUiLCJfaWQiLCJhcHBlbmQiLCJ0eXBlIiwiZGF0YSIsIm9uIiwiX3RpbWUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJyZXMiLCJkYXRlIiwiSEgiLCJtbSIsImdldE1pbnV0ZXMiLCJzcyIsImdldFNlY29uZHMiLCJ5IiwiZ2V0RnVsbFllYXIiLCJtIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJyIiwiYXR0ciIsImpzb24iLCJvbmUiLCJnZXRKU09OIiwibG9nIiwiY29uc29sZSIsImtleSJdLCJtYXBwaW5ncyI6IllBQUEsU0FBU0EsT0FDUEMsS0FBS0MsS0FEUEMsS0FBU0gsbUJBQ1BJLElBQUtGLGtCQUNIQyxJQUFJLG1CQURLSCxJQUFYSyxXQVFBQyxLQUFNLFdBRkpELEtBQUFBLE9BQ0ZKLEtBQUFHLE1BQ0FFLEtBQU1DLE1BRUpOLEtBQUtHLFFBR0xELEtBQUEsV0FQWSxHQUFBSyxHQUFBUCxJQVVaUSxHQUFBLFNBQVNDLEtBQVQsSUFBQUMsTUFHQUYsR0FBQUcsTUFDRUEsSUFBS0osRUFBQU4sSUFBQUMsS0FDSFUsU0FBWVYsT0FDWlcsS0FBUSxTQUdUQyxLQUFLLFNBQUFDLEdBQ0osR0FBSUEsRUFBSUMsU0FHUlIsRUFBRSxTQUFTUyxPQUFURixFQUFBRyxRQUFTRCxTQUFYRSxFQUFBQyxHQUNJRixFQUFKVixFQUFZLHlGQUFBYSxPQUNGRCxFQUFBTCxFQUFBQyxPQUFBLEVBREUsT0FBQUssT0FDRkYsRUFBQUcsS0FERSxtREFBQUQsT0FNVkYsRUFBQUksS0FOVSwyREFBQUYsT0FBWkYsRUFBQUssSUFBWSw0Q0F4QkpoQixFQUFBLFNBQUFpQixPQUFBTixTQXlDTk4sSUFBQUEsV0FDQWEsR0FBQUEsR0FBSTFCLElBQ0oyQixHQUFBQSxRQUFNQyxHQUFBLFFBQUEsV0FDSk4sRUFBQUEsTUFDQUMsSUFBSWhCLEVBQUlOLElBQUM0QixJQUZMaEIsU0FBQSxPQUtQQyxLQUFLLE9BQ0ZhLE1BVk5MLEtBQUEsR0FBQVEsS0FBQUMsTUFBQSxJQUFBRCxLQUFBRSxVQURGVCxLQUFBaEIsRUFBQXNCLFdBZ0JLZixLQUFBLFNBQUFtQixHQUNEQyxFQUFKaEMsWUFLQWlDLE1BQUtELFdBQ0xFLEdBQUVGLEdBQVFHLEVBQUFBLEVBQUFBLEVBQUFBLEVBQVZELEVBQUFFLENBVU16QixPQVROeUIsR0FBS0osR0FBS0ssTUFFVkMsRUFBQU4sRUFBQU8sY0FoRVlDLEVBQUFSLEVBQUFTLFdBQUEsRUFrRWRyQyxFQUFLNEIsRUFBQVUsVUFDSFQsRUFBSTVCLEVBQUtzQyxXQUNUckMsRUFBRTBCLEVBQUZHLGFBQ0U3QixFQUFFRyxFQUFLNEIsYUFFSDFCLEdBQUFBLE9BQUFBLEVBQUFBLEtBQUFBLE9BQVU2QixFQUFWN0IsS0FBQUEsT0FGR2lDLEVBRUhqQyxLQUFBQSxPQUZHc0IsRUFFSHRCLEtBQUFBLE9BRkd1QixFQUVIdkIsS0FBQUEsT0FGR3lCLElBSUhYLElBQUFBLFdBQVFILEdBQUFBLEdBQUd4QixJQUFMUSxHQUFBLFNBQUFvQixHQUFBLFFBQUEsT0FBQSxXQUpIcEIsRUFBUEcsTUFPTUMsSUFBRkwsRUFBQU4sSUFBQUssSUFQSk8sU0FBQSxPQURGYSxLQUFBLE9BcEVZQyxNQUFBSCxJQUFBaEIsRUFBQVIsTUFBQStDLEtBQUEsVUFpRlJ4QyxLQUFLLFNBQVQwQixHQUNFMUIsRUFBQUwsWUFGSjhDLEtBQU0sV0FPQXhDLEVBQUEsY0FBQUMsS0FBQSxJQUFBQyxNQUNELElBQUF1QyxFQUpIekMsR0FBRTBDLFFBQVEsZUFBZ0IsU0FBU25DLEdBS2pDUCxRQUFFMkMsSUFBQXBDLEdBRVUsR0FBUkcsRUFBQUEsU0FGSlYsRUFBRSxjQUFjUyxPQU9aZ0MsRUFBQUEsUUFBSXhCLFNBQVFOLEVBQUFDLEdBQ2JnQyxRQUFBRCxJQUFBaEMsR0FFRFgsRUFBRUEsRUFBQSwyQkFSSixLQUFBLEdBQUE2QyxLQUFBbEMsR0FQRjhCLEVBQUF4QixPQUFBakIsRUFBQSx3Q0FBQWEsT0FBQWdDLEVBQUEsS0FBQWhDLE9BQUFGLEVBQUFrQyxHQUFBLFlBeUJKN0MsR0FBVUgsY0FJVm9CLE9BQUF3QixXQVVBLEdBQUFsRCxNQUFBTSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEFwcCgpIHtcclxuICB0aGlzLmFwaSA9IHtcclxuICAgIGxpc3Q6IFwiL2FwaS9ub3JtYWwvbGlzdFwiLFxyXG4gICAgYWRkOiBcIi9hcGkvbm9ybWFsL2FkZFwiLFxyXG4gICAgZGVsOiBcIi9hcGkvbm9ybWFsL2RlbFwiLFxyXG4gIH07XHJcbn1cclxuQXBwLnByb3RvdHlwZSA9IHtcclxuICAvLyBcclxuICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMubGlzdCgpO1xyXG4gICAgdGhpcy5hZGQoKTtcclxuICAgIHRoaXMuZGVsKCk7XHJcblxyXG4gICAgdGhpcy5qc29uKCk7XHJcbiAgfSxcclxuICBsaXN0OiBmdW5jdGlvbigpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG4gICAgJCgnI2xpc3QnKS5odG1sKFwiXCIpLmhpZGUoKTtcclxuICAgIHZhciBpdGVtO1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6IG1lLmFwaS5saXN0LFxyXG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICB0eXBlOiBcIlBPU1RcIixcclxuICAgICAgfSlcclxuICAgICAgLmRvbmUoZnVuY3Rpb24oYXJyKSB7XHJcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkKCcjbGlzdCcpLnNob3coKTtcclxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgaXRlbSA9ICQoYDxkaXYgY2xhc3M9XCJpdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImwgaW5mb1wiIHN0eWxlPVwiYW5pbWF0aW9uLWRlbGF5OiR7aW5kZXggLyBhcnIubGVuZ3RoKjV9c1wiPiR7aXRlbS5pbmZvfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibFwiPiR7aXRlbS50aW1lfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiciBkZWxcIiBfaWQ9JHtpdGVtLl9pZH0+ZGVsPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PmApO1xyXG4gICAgICAgICAgJCgnI2xpc3QnKS5hcHBlbmQoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgfSlcclxuICB9LFxyXG4gIGFkZDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgJCgnI2FkZCcpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICB1cmw6IG1lLmFwaS5hZGQsXHJcbiAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcclxuICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgaW5mbzogXCJcIiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMCksXHJcbiAgICAgICAgICAgIHRpbWU6IG1lLl90aW1lKClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uKHJlcykge1xyXG4gICAgICAgICAgbWUubGlzdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICAvLyDojrflj5blvZPliY3ns7vnu5/ml7bpl7TmiLNcclxuICBfdGltZTogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGF0ZSwgeSwgbSwgciwgSEgsIG1tLCBzcztcclxuICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgeSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIG0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgciA9IGRhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgSEggPSBkYXRlLmdldEhvdXJzKCk7XHJcbiAgICBtbSA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG4gICAgc3MgPSBkYXRlLmdldFNlY29uZHMoKTtcclxuXHJcbiAgICByZXR1cm4gYCR7eX0tJHttfS0ke3J9ICR7SEh9OiR7bW19OiR7c3N9YDtcclxuICB9LFxyXG4gIGRlbDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgJCgnI2xpc3QnKS5vbihcImNsaWNrXCIsIFwiLmRlbFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgJC5hamF4KHtcclxuICAgICAgICAgIHVybDogbWUuYXBpLmRlbCxcclxuICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgZGF0YTogeyBfaWQ6ICQodGhpcykuYXR0cihcIl9pZFwiKSB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZG9uZShmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgIG1lLmxpc3QoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAganNvbjogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgJCgnI2xpc3RfanNvbicpLmh0bWwoXCJcIikuaGlkZSgpO1xyXG4gICAgdmFyIG9uZTtcclxuICAgICQuZ2V0SlNPTihcIi4vaW5kZXguanNvblwiLCBmdW5jdGlvbihhcnIpIHtcclxuICAgICAgY29uc29sZS5sb2coYXJyKTtcclxuICAgICAgaWYgKGFyci5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAkKCcjbGlzdF9qc29uJykuc2hvdygpO1xyXG5cclxuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhpdGVtKTtcclxuXHJcbiAgICAgICAgb25lID0gJChgPGRpdiBjbGFzcz1cIml0ZW1cIj48L2Rpdj5gKTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaXRlbSkge1xyXG4gICAgICAgICAgb25lLmFwcGVuZCgkKGA8c3BhbiBjbGFzcz1cImxcIiBzdHlsZT1cIndpZHRoOjEwMHB4O1wiPiR7a2V5fToke2l0ZW1ba2V5XX08L3NwYW4+YCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcjbGlzdF9qc29uJykuYXBwZW5kKG9uZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuXHJcbiAgICB9KVxyXG4gIH0sXHJcbn07XHJcblxyXG5cclxuXHJcbm5ldyBBcHAoKS5pbml0KCk7XHJcblxyXG5cclxuXHJcbi8vICQuYWpheCh7XHJcbi8vICAgdXJsOiBcIi9hcGkvanNfZGVtby9mb250LmRvXCIsXHJcbi8vICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4vLyAgIHR5cGU6IFwiUE9TVFwiLFxyXG4vLyB9KVxyXG4vLyAgIC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XHJcbi8vICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKirmtYvor5XmlbDmja5cclxuLy8gICAgIC8vIHZhciBzaXplID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjAwKTtcclxuLy8gICAgIC8vIGlmIChzaXplIDwgNjApIHtcclxuLy8gICAgIC8vICAgc2l6ZSA9IDYwO1xyXG4vLyAgICAgLy8gfVxyXG4vLyAgICAgLy8gdmFyIGNvbG9yID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCk7XHJcbi8vICAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKirmtYvor5XmlbDmja5cclxuXHJcbi8vICAgICAvLyBDU1Porr7nva5cclxuLy8gICAgICQoJyNkZW1vJykuY3NzKHtcclxuLy8gICAgICAgZm9udFNpemU6IGRhdGEuc2l6ZSArIFwicHhcIixcclxuLy8gICAgICAgY29sb3I6ICcjJyArIGRhdGEuY29sb3JcclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIC8vIOaYvuekuuS/oeaBr1xyXG4vLyAgICAgJCgnI2luZm8nKS5odG1sKGBmb250U2l6ZToke2RhdGEuc2l6ZX1weDsgY29sb3I6IyR7ZGF0YS5jb2xvcn1gKTtcclxuXHJcbi8vICAgICAvLyBcclxuLy8gICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKGFyZ3VtZW50KSB7XHJcbi8vICAgICAgIHRoaXMuaW5pdCgpO1xyXG4vLyAgICAgfS5iaW5kKHRoaXMpLCAyMDAwKTtcclxuXHJcbi8vICAgfS5iaW5kKHRoaXMpKTsiXX0=
